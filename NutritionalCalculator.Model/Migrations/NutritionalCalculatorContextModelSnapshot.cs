// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutritionalCalculator.Model.Entities.Db;

namespace NutritionalCalculator.Model.Migrations
{
    [DbContext(typeof(NutritionalCalculatorContext))]
    partial class NutritionalCalculatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.ConsumedFoods", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("NumberOfPlate");

                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<short?>("ConsumedUnits");

                    b.Property<float?>("MassConsumedInGr");

                    b.Property<float?>("VolumeConsumedInMl");

                    b.HasKey("IdUser", "Date", "NumberOfPlate", "IdFood");

                    b.HasIndex("IdFood");

                    b.ToTable("ConsumedFoods","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FattyAcidsAndCholesterol", b =>
                {
                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<float?>("Cholesterol");

                    b.Property<float?>("MonounsaturatedFat");

                    b.Property<float?>("PolyunsaturatedFat");

                    b.Property<float?>("SaturatedFat");

                    b.HasKey("IdFood");

                    b.ToTable("FattyAcidsAndCholesterol","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Foods", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<float?>("ReferenceMassInGrams");

                    b.Property<short?>("ReferenceUnits");

                    b.Property<float?>("ReferenceVolumeInMililiters");

                    b.HasKey("Id");

                    b.ToTable("Foods","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsCategories", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("FoodCategories","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsEditedByUsers", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(150);

                    b.Property<string>("FoodId")
                        .HasMaxLength(150);

                    b.Property<DateTime>("EditionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Creation");

                    b.Property<bool>("Edition");

                    b.HasKey("UserId", "FoodId", "EditionDate");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodsEditedByUsers","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsInCategories", b =>
                {
                    b.Property<short>("FoodCategoryId");

                    b.Property<string>("FoodId")
                        .HasMaxLength(150);

                    b.HasKey("FoodCategoryId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodInCategories","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsReferences", b =>
                {
                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<string>("IdReference")
                        .HasMaxLength(150);

                    b.HasKey("IdFood", "IdReference");

                    b.HasIndex("IdReference");

                    b.ToTable("FoodReferences","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Macronutrients", b =>
                {
                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<float?>("Calories");

                    b.Property<double?>("Carbohydrates");

                    b.Property<float?>("Fiber");

                    b.Property<float?>("Grease");

                    b.Property<float?>("Protein");

                    b.HasKey("IdFood");

                    b.ToTable("Macronutrients","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Minerals", b =>
                {
                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<float?>("Calcium");

                    b.Property<float?>("Iodo");

                    b.Property<float?>("Iron");

                    b.Property<float?>("Manganese");

                    b.Property<float?>("Phosphorus");

                    b.Property<float?>("Potassium");

                    b.Property<float?>("Sodium");

                    b.Property<float?>("Zinc");

                    b.HasKey("IdFood");

                    b.ToTable("Minerals","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Reference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Reference","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Roles", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Roles","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<bool?>("UnlockedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Unlocked account")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.UsersInRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(150);

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersInRoles","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Vitamins", b =>
                {
                    b.Property<string>("IdFood")
                        .HasMaxLength(150);

                    b.Property<float?>("Folates");

                    b.Property<float?>("Niacin");

                    b.Property<float?>("Riboflavin");

                    b.Property<float?>("Thiamin");

                    b.Property<float?>("VitaminA");

                    b.Property<float?>("VitaminB12");

                    b.Property<float?>("VitaminC");

                    b.HasKey("IdFood");

                    b.ToTable("Vitamins","Api");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.ConsumedFoods", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithMany("ConsumedFoods")
                        .HasForeignKey("IdFood")
                        .HasConstraintName("FK_ConsumedFoods__Foods");

                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Users", "IdUserNavigation")
                        .WithMany("ConsumedFoods")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_ConsumedFoods__Users");
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FattyAcidsAndCholesterol", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithOne("FattyAcidsAndCholesterol")
                        .HasForeignKey("NutritionalCalculator.Model.Entities.Db.FattyAcidsAndCholesterol", "IdFood")
                        .HasConstraintName("FK_FattyAcidsAndCholesterol__Foods")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsEditedByUsers", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "Food")
                        .WithMany("FoodsEditedByUsers")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodsEditedByUsers__Foods")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Users", "User")
                        .WithMany("FoodsEditedByUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FoodsEditedByUsers__Users")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsInCategories", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.FoodsCategories", "FoodCategory")
                        .WithMany("FoodInCategories")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK_FoodInCategories___FoodCategory")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "Food")
                        .WithMany("FoodInCategories")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodInCategories___Foods")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.FoodsReferences", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithMany("FoodReferences")
                        .HasForeignKey("IdFood")
                        .HasConstraintName("FK_FoodReferences__Foods")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Reference", "IdReferenceNavigation")
                        .WithMany("FoodReferences")
                        .HasForeignKey("IdReference")
                        .HasConstraintName("FK_FoodReferences__References")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Macronutrients", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithOne("Macronutrients")
                        .HasForeignKey("NutritionalCalculator.Model.Entities.Db.Macronutrients", "IdFood")
                        .HasConstraintName("FK_Macronutrients__Foods")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Minerals", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithOne("Minerals")
                        .HasForeignKey("NutritionalCalculator.Model.Entities.Db.Minerals", "IdFood")
                        .HasConstraintName("FK_Minerals__Foods")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.UsersInRoles", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Roles", "Role")
                        .WithMany("UsersInRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UsersInRoles__Roles")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Users", "User")
                        .WithMany("UsersInRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersInRoles__Users")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutritionalCalculator.Model.Entities.Db.Vitamins", b =>
                {
                    b.HasOne("NutritionalCalculator.Model.Entities.Db.Foods", "IdFoodNavigation")
                        .WithOne("Vitamins")
                        .HasForeignKey("NutritionalCalculator.Model.Entities.Db.Vitamins", "IdFood")
                        .HasConstraintName("FK_Vitamins__Foods")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
